// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/shorturl/v1/shorturl.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortURLService_AddShorten_FullMethodName      = "/shorturl.v1.ShortURLService/AddShorten"
	ShortURLService_GetURL_FullMethodName          = "/shorturl.v1.ShortURLService/GetURL"
	ShortURLService_AddShortenBatch_FullMethodName = "/shorturl.v1.ShortURLService/AddShortenBatch"
	ShortURLService_GetUserURLs_FullMethodName     = "/shorturl.v1.ShortURLService/GetUserURLs"
	ShortURLService_RemoveURLs_FullMethodName      = "/shorturl.v1.ShortURLService/RemoveURLs"
	ShortURLService_Ping_FullMethodName            = "/shorturl.v1.ShortURLService/Ping"
	ShortURLService_GetStats_FullMethodName        = "/shorturl.v1.ShortURLService/GetStats"
)

// ShortURLServiceClient is the client API for ShortURLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ShortURLService defines the gRPC service for URL shortening
type ShortURLServiceClient interface {
	// AddShorten adds a single URL and returns its shortened version
	AddShorten(ctx context.Context, in *AddShortenRequest, opts ...grpc.CallOption) (*AddShortenResponse, error)
	// GetURL retrieves the original URL by its short name
	GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error)
	// AddShortenBatch adds multiple URLs and returns their shortened versions
	AddShortenBatch(ctx context.Context, in *AddShortenBatchRequest, opts ...grpc.CallOption) (*AddShortenBatchResponse, error)
	// GetUserURLs retrieves all URLs for a user
	GetUserURLs(ctx context.Context, in *GetUserURLsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUserURLsResponse], error)
	// RemoveURLs removes multiple URLs for a user
	RemoveURLs(ctx context.Context, in *RemoveURLsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Ping checks if the service is ready
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	// GetStats returns service statistics
	GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type shortURLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortURLServiceClient(cc grpc.ClientConnInterface) ShortURLServiceClient {
	return &shortURLServiceClient{cc}
}

func (c *shortURLServiceClient) AddShorten(ctx context.Context, in *AddShortenRequest, opts ...grpc.CallOption) (*AddShortenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddShortenResponse)
	err := c.cc.Invoke(ctx, ShortURLService_AddShorten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetURLResponse)
	err := c.cc.Invoke(ctx, ShortURLService_GetURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) AddShortenBatch(ctx context.Context, in *AddShortenBatchRequest, opts ...grpc.CallOption) (*AddShortenBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddShortenBatchResponse)
	err := c.cc.Invoke(ctx, ShortURLService_AddShortenBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) GetUserURLs(ctx context.Context, in *GetUserURLsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUserURLsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShortURLService_ServiceDesc.Streams[0], ShortURLService_GetUserURLs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUserURLsRequest, GetUserURLsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShortURLService_GetUserURLsClient = grpc.ServerStreamingClient[GetUserURLsResponse]

func (c *shortURLServiceClient) RemoveURLs(ctx context.Context, in *RemoveURLsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ShortURLService_RemoveURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ShortURLService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLServiceClient) GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, ShortURLService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLServiceServer is the server API for ShortURLService service.
// All implementations must embed UnimplementedShortURLServiceServer
// for forward compatibility.
//
// ShortURLService defines the gRPC service for URL shortening
type ShortURLServiceServer interface {
	// AddShorten adds a single URL and returns its shortened version
	AddShorten(context.Context, *AddShortenRequest) (*AddShortenResponse, error)
	// GetURL retrieves the original URL by its short name
	GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error)
	// AddShortenBatch adds multiple URLs and returns their shortened versions
	AddShortenBatch(context.Context, *AddShortenBatchRequest) (*AddShortenBatchResponse, error)
	// GetUserURLs retrieves all URLs for a user
	GetUserURLs(*GetUserURLsRequest, grpc.ServerStreamingServer[GetUserURLsResponse]) error
	// RemoveURLs removes multiple URLs for a user
	RemoveURLs(context.Context, *RemoveURLsRequest) (*empty.Empty, error)
	// Ping checks if the service is ready
	Ping(context.Context, *empty.Empty) (*PingResponse, error)
	// GetStats returns service statistics
	GetStats(context.Context, *empty.Empty) (*GetStatsResponse, error)
	mustEmbedUnimplementedShortURLServiceServer()
}

// UnimplementedShortURLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortURLServiceServer struct{}

func (UnimplementedShortURLServiceServer) AddShorten(context.Context, *AddShortenRequest) (*AddShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShorten not implemented")
}
func (UnimplementedShortURLServiceServer) GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedShortURLServiceServer) AddShortenBatch(context.Context, *AddShortenBatchRequest) (*AddShortenBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShortenBatch not implemented")
}
func (UnimplementedShortURLServiceServer) GetUserURLs(*GetUserURLsRequest, grpc.ServerStreamingServer[GetUserURLsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserURLs not implemented")
}
func (UnimplementedShortURLServiceServer) RemoveURLs(context.Context, *RemoveURLsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveURLs not implemented")
}
func (UnimplementedShortURLServiceServer) Ping(context.Context, *empty.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortURLServiceServer) GetStats(context.Context, *empty.Empty) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortURLServiceServer) mustEmbedUnimplementedShortURLServiceServer() {}
func (UnimplementedShortURLServiceServer) testEmbeddedByValue()                         {}

// UnsafeShortURLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortURLServiceServer will
// result in compilation errors.
type UnsafeShortURLServiceServer interface {
	mustEmbedUnimplementedShortURLServiceServer()
}

func RegisterShortURLServiceServer(s grpc.ServiceRegistrar, srv ShortURLServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortURLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortURLService_ServiceDesc, srv)
}

func _ShortURLService_AddShorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).AddShorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_AddShorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).AddShorten(ctx, req.(*AddShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).GetURL(ctx, req.(*GetURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_AddShortenBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShortenBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).AddShortenBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_AddShortenBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).AddShortenBatch(ctx, req.(*AddShortenBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_GetUserURLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserURLsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShortURLServiceServer).GetUserURLs(m, &grpc.GenericServerStream[GetUserURLsRequest, GetUserURLsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShortURLService_GetUserURLsServer = grpc.ServerStreamingServer[GetUserURLsResponse]

func _ShortURLService_RemoveURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).RemoveURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_RemoveURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).RemoveURLs(ctx, req.(*RemoveURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServiceServer).GetStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortURLService_ServiceDesc is the grpc.ServiceDesc for ShortURLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortURLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorturl.v1.ShortURLService",
	HandlerType: (*ShortURLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShorten",
			Handler:    _ShortURLService_AddShorten_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _ShortURLService_GetURL_Handler,
		},
		{
			MethodName: "AddShortenBatch",
			Handler:    _ShortURLService_AddShortenBatch_Handler,
		},
		{
			MethodName: "RemoveURLs",
			Handler:    _ShortURLService_RemoveURLs_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortURLService_Ping_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ShortURLService_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserURLs",
			Handler:       _ShortURLService_GetUserURLs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/shorturl/v1/shorturl.proto",
}
